name: ci

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

concurrency:
  # allow concurrent jobs on master, but not on PRs
  group: ${{ github.workflow }}-${{ (github.ref == 'refs/heads/master' && github.sha) || github.ref }}
  cancel-in-progress: true

jobs:
  build-rust-macos:
    runs-on: macos-latest
    needs:
      - build-cmake-macos
    env:
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: brew install ninja icu4c --quiet
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: Build
        run: cargo build --features compile-cpp --all-targets
      - name: Run tests
        run: cargo nextest run --no-fail-fast --features compile-cpp
      - name: Run slow tests
        run: cargo nextest run --no-fail-fast --features compile-cpp -- --ignored
        env:
          CHAKRA_TEST_SLOW: true

  build-rust-ubuntu:
    runs-on: ubuntu-latest
    needs:
      - build-cmake-ubuntu
    env:
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: sudo apt-get install -y ninja-build libc++-dev libc++abi-dev
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: Build
        run: cargo build --features compile-cpp --all-targets
      - name: Run tests
        run: cargo nextest run --no-fail-fast --features compile-cpp
      - name: Run slow tests
        run: cargo nextest run --no-fail-fast --features compile-cpp -- --ignored
        env:
          CHAKRA_TEST_SLOW: true

  build-rust-windows:
    runs-on: windows-latest
    needs:
      - build-msvc
    strategy:
      fail-fast: false
    env:
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64
      - name: Set timezone
        run: tzutil /s "Pacific Standard time"
      - name: Build
        run: cargo build --features compile-cpp --all-targets
      - name: Run tests
        run: cargo nextest run --no-fail-fast --features compile-cpp
      - name: Run slow tests
        run: cargo nextest run --no-fail-fast --features compile-cpp -- --ignored
        env:
          CHAKRA_TEST_SLOW: true

  build-cmake-macos:
    name: macos / ${{ matrix.cmake-target }}
    runs-on: macos-latest
    timeout-minutes: 120
    defaults:
      run:
        working-directory: ${{ github.workspace }}/chakracore-cxx/cmake-build
    strategy:
      fail-fast: false
      matrix:
        cmake-target:
          - Chakra.Common.Util
          - Chakra.Pal
          - Chakra.Common.Codex
          - Chakra.Common.Common
          - Chakra.Common.Core
          - Chakra.Common.DataStructures
          - Chakra.Common.Exceptions
          - Chakra.Common.Memory
          - Chakra.Jsrt
          - Chakra.Jsrt.Core
          - Chakra.Parser
          - Chakra.Runtime.Base
          - Chakra.Runtime.ByteCode
          - Chakra.Runtime.Debug
          - Chakra.Runtime.Language
          - Chakra.Runtime.Library
          - Chakra.Runtime.Math
          - Chakra.Runtime.PlatformAgnostic
          - Chakra.Runtime.Types
          - Chakra.SCACore
    env:
      CXX: clang++
      CC: clang
    steps:
      - uses: actions/checkout@v4
      - name: Create build directory
        working-directory: ${{ github.workspace }}/chakracore-cxx
        run: mkdir -p cmake-build
      - name: Install dependencies
        run: brew install ninja icu4c --quiet
      - name: Configure CMake
        run: cmake -DCMAKE_BUILD_TYPE=Debug -DICU_INCLUDE_PATH=/opt/homebrew/opt/icu4c/include -DDISABLE_JIT=ON -GNinja ..
      - run: ninja ${{ matrix.cmake-target }}

  build-cmake-ubuntu:
    name: ubuntu / ${{ matrix.cmake-target }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    defaults:
      run:
        working-directory: ${{ github.workspace }}/chakracore-cxx/cmake-build
    strategy:
      fail-fast: false
      matrix:
        cmake-target:
          - Chakra.Common.Util
          - Chakra.Pal
          - Chakra.Common.Codex
          - Chakra.Backend
          - Chakra.Common.Common
          - Chakra.Common.Core
          - Chakra.Common.DataStructures
          - Chakra.Common.Exceptions
          - Chakra.Common.Memory
          - Chakra.Jsrt
          - Chakra.Jsrt.Core
          - Chakra.Parser
          - Chakra.Runtime.Base
          - Chakra.Runtime.ByteCode
          - Chakra.Runtime.Debug
          - Chakra.Runtime.Language
          - Chakra.Runtime.Library
          - Chakra.Runtime.Math
          - Chakra.Runtime.PlatformAgnostic
          - Chakra.Runtime.Types
          - Chakra.SCACore
          - libwabt
          - Chakra.WasmReader
    env:
      CXX: clang++
      CC: clang
    steps:
      - uses: actions/checkout@v4
      - name: Create build directory
        working-directory: ${{ github.workspace }}/chakracore-cxx
        run: mkdir -p cmake-build
      - name: Install dependencies
        run: sudo apt-get install -y ninja-build libc++-dev libc++abi-dev
      - name: Configure CMake
        run: cmake -DCMAKE_BUILD_TYPE=Debug -GNinja ..
      - run: ninja ${{ matrix.cmake-target }}

  build-msvc:
    name: msvc / windows / ${{ matrix.build-type }}
    runs-on: windows-latest
    timeout-minutes: 120
    defaults:
      run:
        working-directory: ${{ github.workspace }}/chakracore-cxx
    strategy:
      fail-fast: false
      matrix:
        build-type:
          - debug
    steps:
      - uses: actions/checkout@v4
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64
      - name: Build
        run: msbuild /p:Platform=x64 /p:Configuration=${{ matrix.build-type }} Build/Chakra.Core.sln
