//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

cpp_quote("#ifndef __JITTypes_h__")
cpp_quote("#define __JITTypes_h__")

#include "JITTypes.h"

// we can't include Windows.h, so for simplicity, let's define these values ourself
// from: https://msdn.microsoft.com/en-us/library/windows/desktop/ms684880.aspx
#define PROCESS_VM_OPERATION 0x0008
#define PROCESS_VM_READ 0x0010
#define PROCESS_VM_WRITE 0x0020
#define PROCESS_QUERY_LIMITED_INFORMATION 0x1000

cpp_quote("#endif //__JITTypes_h__")

[
    uuid(ead694ed-2243-44cb-a9dc-85d3ba934dab),
    pointer_default(unique)
]
interface IChakraJIT
{
    typedef CodeGenWorkItemIDL* pCodeGenWorkItemIDL;
    int32_t Shutdown([in] handle_t binding);

    int32_t ConnectProcessWithProcessHandle(
        [in] handle_t binding,
        [in, system_handle(sh_process, PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_QUERY_LIMITED_INFORMATION)] HANDLE processHandle,
        [in] CHAKRA_PTR chakraBaseAddress,
        [in] CHAKRA_PTR crtBaseAddress
    );

#if !(WINVER >= _WIN32_WINNT_WINBLUE)
    int32_t ConnectProcess(
        [in] handle_t binding,
        [in] CHAKRA_PTR chakraBaseAddress,
        [in] CHAKRA_PTR crtBaseAddress
    );
#endif

    int32_t InitializeThreadContext(
        [in] handle_t binding,
        [in] ThreadContextDataIDL * threadData,
        [out] PPTHREADCONTEXT_HANDLE threadContextInfoAddress,
        [out] CHAKRA_PTR * prereservedRegionAddr,
        [out] CHAKRA_PTR * jitThunkAddr);


    int32_t CleanupThreadContext(
        [in] handle_t binding,
        [in, out] PPTHREADCONTEXT_HANDLE threadContextInfoAddress);

    int32_t UpdatePropertyRecordMap(
        [in] handle_t binding,
        [in] PTHREADCONTEXT_HANDLE threadContextInfoAddress,
        [in, unique] BVSparseNodeIDL * updatedPropsBVHead);

    int32_t AddModuleRecordInfo(
        [in] handle_t binding,
        [in] PSCRIPTCONTEXT_HANDLE scriptContextInfoAddress,
        [in] unsigned int moduleId,
        [in] CHAKRA_PTR localExportSlotsAddr);

    int32_t SetWellKnownHostTypeId(
        [in] handle_t binding,
        [in] PTHREADCONTEXT_HANDLE threadContextInfoAddress,
        [in] int typeId);

    int32_t InitializeScriptContext(
        [in] handle_t binding,
        [in] ScriptContextDataIDL * scriptContextData,
        [in] PTHREADCONTEXT_HANDLE threadContextInfoAddress,
        [out] PPSCRIPTCONTEXT_HANDLE scriptContextInfoAddress);

    int32_t CloseScriptContext(
        [in] handle_t binding,
        [in] PSCRIPTCONTEXT_HANDLE scriptContextInfoAddress);

    int32_t CleanupScriptContext(
        [in] handle_t binding,
        [in, out] PPSCRIPTCONTEXT_HANDLE scriptContextInfoAddress);

    int32_t FreeAllocation(
        [in] handle_t binding,
        [in] PSCRIPTCONTEXT_HANDLE scriptContextInfoAddress,
        [in] CHAKRA_PTR codeAddress);

    int32_t NewInterpreterThunkBlock(
        [in] handle_t binding,
        [in] PSCRIPTCONTEXT_HANDLE scriptContextInfoAddress,
        [in] InterpreterThunkInputIDL * thunkInput,
        [out] InterpreterThunkOutputIDL * thunkOutput);

    int32_t DecommitInterpreterBufferManager(
        [in] handle_t binding,
        [in] PSCRIPTCONTEXT_HANDLE scriptContextInfoAddress,
        [in] boolean asmJsManager);

    int32_t IsNativeAddr(
        [in] handle_t binding,
        [in] PTHREADCONTEXT_HANDLE threadContextInfoAddress,
        [in] CHAKRA_PTR address,
        [out] boolean * result);

    int32_t SetIsPRNGSeeded(
        [in] handle_t binding,
        [in] PSCRIPTCONTEXT_HANDLE scriptContextInfoAddress,
        [in] boolean value);

    int32_t RemoteCodeGen(
        [in] handle_t binding,
        [in] PSCRIPTCONTEXT_HANDLE scriptContextInfoAddress,
        [in] CodeGenWorkItemIDL * workItemData,
        [out] JITOutputIDL * jitData);

#if DBG
    int32_t IsInterpreterThunkAddr(
        [in] handle_t binding,
        [in] PSCRIPTCONTEXT_HANDLE scriptContextInfoAddress,
        [in] CHAKRA_PTR address,
        [in] boolean asmjsThunk,
        [out] boolean * result);
#endif
}
